module image_generator(start, master_clk, DAC_clk, VGA_R, VGA_G, VGA_B, VGA_hSync, VGA_vSync, blank_n);
    
    input master_clk;
    output reg [7:0]VGA_R, VGA_G, VGA_B;
    output VGA_hSync, VGA_vSync, DAC_clk, blank_n; 
    wire [9:0] pixelColumn;
    wire [9:0] pixelRow;
    wire displayArea;
    wire VGA_clk;
    input start;
    
    clk_reduce reduce1(master_clk, VGA_clk);
    VGA_gen gen1(VGA_clk, pixelColumn, pixelRow, displayArea, VGA_hSync, VGA_vSync, blank_n);
    assign DAC_clk = VGA_clk;

	 parameter x_center = 640 / 2;
    parameter y_center = 480 / 2;
    parameter [7:0] startRed = 8'h00, startGreen = 8'h00, startBlue = 8'hFF; //inside
    parameter [7:0] endRed = 8'hFF, endGreen = 8'h00, endBlue = 8'h00; //outside
    reg [31:0] distance_squared, max_distance_squared;
	 
    always @(posedge VGA_clk) begin
		  
		  max_distance_squared = ((x_center - 0) * (x_center - 0)) + ((y_center - 0) * (y_center - 0));
        if (pixelColumn == 150 && pixelRow == 100) begin
            VGA_R = 8'h00;
            VGA_G = 8'hFF;
            VGA_B = 8'hFF;
        end else begin
            distance_squared = ((pixelColumn - x_center) * (pixelColumn - x_center)) + ((pixelRow - y_center) * (pixelRow - y_center));
				
            VGA_R <= startRed + ((endRed - startRed) * distance_squared / max_distance_squared) % 256;
            VGA_G <= startGreen + ((endGreen - startGreen) * distance_squared / max_distance_squared) % 256;
            VGA_B <= startBlue + ((endBlue - startBlue) * distance_squared / max_distance_squared) % 256;
        end
    end 

endmodule


/////////////////////////////////////////////////////////////////////////////////////////////////

//clock q is half the frequency of p
module clk_reduce(master_clk, VGA_clk);

	input master_clk; //50MHz clock
	output reg VGA_clk; //25MHz clock

	always@(posedge master_clk)
	begin
		VGA_clk <= ~VGA_clk;
	end
endmodule

module VGA_gen(VGA_clk, xCount, yCount, displayArea, VGA_hSync, VGA_vSync, blank_n);

	input VGA_clk;
	output reg [9:0]xCount, yCount; 
	output reg displayArea;  
	output VGA_hSync, VGA_vSync, blank_n;

	reg p_hSync, p_vSync; 
	
	integer porchHF = 640; //start of horizntal front porch
	integer syncH = 655;//start of horizontal sync
	integer porchHB = 747; //start of horizontal back porch
	integer maxH = 793; //total length of line.

	integer porchVF = 480; //start of vertical front porch 
	integer syncV = 490; //start of vertical sync
	integer porchVB = 492; //start of vertical back porch
	integer maxV = 525; //total rows. 

	always@(posedge VGA_clk)
	begin
		if(xCount == maxH)
			xCount <= 0;
		else
			xCount <= xCount + 1;
	end

	always@(posedge VGA_clk)
	begin
		if(xCount == maxH)//at the end of each row (last column)
		begin
			if(yCount == maxV)//if we are at the last row
				yCount <= 0;
			else
			yCount <= yCount + 1;
		end
	end
	
	always@(posedge VGA_clk)
	begin
		displayArea <= ((xCount < porchHF) && (yCount < porchVF)); 
	end

	always@(posedge VGA_clk)
	begin
		p_hSync <= ((xCount >= syncH) && (xCount < porchHB)); 
		p_vSync <= ((yCount >= syncV) && (yCount < porchVB)); 
	end
 
	assign VGA_vSync = ~p_vSync; 
	assign VGA_hSync = ~p_hSync;
	assign blank_n = displayArea;
endmodule		

